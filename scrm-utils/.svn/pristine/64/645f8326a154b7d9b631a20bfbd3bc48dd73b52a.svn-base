package cn.com.scrm.tool;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import org.apache.commons.lang.StringUtils;


/**
 * @desc 日期工具类
 * @author wsbg
 * **/
public final class DateTool {
	  public static final SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	  public static final SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy/MM/dd");
	  public static final SimpleDateFormat sdf3 = new SimpleDateFormat("MM.dd");
	  public static final SimpleDateFormat sdf4 = new SimpleDateFormat("HH:mm");
	  public static final SimpleDateFormat sdf5 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	  public static final SimpleDateFormat sdf6 = new SimpleDateFormat("yyyy/MM");

	 // @author 
	 // 计算本周  上周  前三月  今年  去年 的时间段
	 // 组装时间  用于计算同比和环比的
	public static  Map<String, Object>  getcurrlastweek(Map<String, Object> map){
	    String isdata = (String) map.get("range");
	    boolean bool = false;
	    if(null==isdata || "".equals(isdata)){
	        isdata ="thisWeek";
	    }
	    Calendar cal = Calendar.getInstance(Locale.CHINA);
	    Calendar cal2 = Calendar.getInstance(Locale.CHINA);
	    //n为推迟的周数，1本周，-1向前推迟一周，2下周，依次类推
	    String yearbegin = null;
	    String yearend = null;
	    switch(isdata){
	         case "thisDay":
	            bool = true;
	            yearbegin = new SimpleDateFormat("yyyy-MM-dd").format(cal2.getTime());
	            yearend = yearbegin;
             break;
	         case "thisWeek":
	                bool = true;
	                cal.setTimeInMillis(System.currentTimeMillis());
	                cal.add(Calendar.DATE, -1);
	                yearend = new SimpleDateFormat("yyyy-MM-dd").format(cal.getTime());
	                cal2.setTimeInMillis(System.currentTimeMillis());
	                cal2.add(Calendar.DATE, -7);
	                yearbegin = new SimpleDateFormat("yyyy-MM-dd").format(cal2.getTime());
	         break;
	         case "thisMonth":
	        	    cal.setTimeInMillis(System.currentTimeMillis());
	                cal.add(Calendar.DATE, -1);
	                cal2.setTimeInMillis(System.currentTimeMillis());
	        	    if(isfirstDayOfMonth(cal2.getTime())) {
	        	    	yearbegin = getFisrtDayOfMonth(cal.getTime().getYear(), cal.getTime().getMonth());
	        	    	yearend= getLastDayOfMonth(cal.getTime().getYear(),cal.getTime().getMonth());
	        	    }else {
	        	    	yearend = new SimpleDateFormat("yyyy-MM-dd").format(cal.getTime());
	 	                cal.add(Calendar.MONTH,-1);
	 	                yearbegin= new SimpleDateFormat("yyyy-MM-dd").format(cal.getTime());
	        	    }
	         break;
	         case "thisThreeMonth":
	        	 cal.setTimeInMillis(System.currentTimeMillis());
	             cal.add(Calendar.DATE, -1);
	             cal2.setTimeInMillis(System.currentTimeMillis());
	        	 if(isfirstDayOfMonth(cal2.getTime())) {
	        	    	yearbegin = getFisrtDayOfMonth(cal.getTime().getYear(), cal.getTime().getMonth());
	        	    	cal.add(Calendar.DATE, -3);
	        	    	yearend = getLastDayOfMonth(cal.getTime().getYear(),cal.getTime().getMonth());
	        	    }else {
	        	    	yearend= new SimpleDateFormat("yyyy-MM-dd").format(cal.getTime());
	        	    	cal.add(Calendar.MONTH,-3);
	 	                yearbegin = new SimpleDateFormat("yyyy-MM-dd").format(cal.getTime());
	        	    }
	         break;
	         case "thisYear":
	        	    cal2.setTimeInMillis(System.currentTimeMillis());
	                cal2.add(Calendar.DATE, -1);
	                yearend = new SimpleDateFormat("yyyy-MM-dd").format(cal2.getTime());
	                cal2.add(Calendar.MONTH,-12);
	                yearbegin = new SimpleDateFormat("yyyy-MM-dd").format(cal2.getTime());
	                break;
	         default:
	                break;               
	     }
	     map.put("startTime", yearbegin);
	     map.put("endTime", yearend);
	     return map;
  }
	
    /**
     * 获取某年某月的第一天
     * */
	public static String getFisrtDayOfMonth(int year,int month)
	{
		Calendar cal = Calendar.getInstance();
		//设置年份
		cal.set(Calendar.YEAR,year);
		//设置月份
		cal.set(Calendar.MONTH, month-1);
		//获取某月最小天数
		int firstDay = cal.getActualMinimum(Calendar.DAY_OF_MONTH);
		//设置日历中月份的最小天数
		cal.set(Calendar.DAY_OF_MONTH, firstDay);
		//格式化日期
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String firstDayOfMonth = sdf.format(cal.getTime());
		
		return firstDayOfMonth;
	}
	
	 /**
     * 获取某年某月的第一天
     * */
	public static String getLastDayOfMonth(int year,int month)
	{
		Calendar cal = Calendar.getInstance();
		//设置年份
		cal.set(Calendar.YEAR,year);
		//设置月份
		cal.set(Calendar.MONTH, month-1);
		//获取某月最小天数
		int firstDay = cal.getActualMaximum(Calendar.DAY_OF_MONTH);
		//设置日历中月份的最小天数
		cal.set(Calendar.DAY_OF_MONTH, firstDay);
		//格式化日期
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String firstDayOfMonth = sdf.format(cal.getTime());
		
		return firstDayOfMonth;
	}
	 /***
	  * 判断当天是否月末
	  * */
	 public static boolean isLastDayOfMonth(Date date) { 
	        Calendar calendar = Calendar.getInstance(); 
	        calendar.setTime(date); 
	        calendar.set(Calendar.DATE, (calendar.get(Calendar.DATE) + 1)); 
	        if (calendar.get(Calendar.DAY_OF_MONTH) == 1) { 
	            return true; 
	        } 
	        return false; 
	  }
	 
	 /***
	  * 判断当天是否月初
	  * */
	 public static boolean isfirstDayOfMonth(Date date) { 
	        Calendar calendar = Calendar.getInstance(); 
	        calendar.setTime(date); 
	        if (calendar.get(Calendar.DAY_OF_MONTH) == 1) { 
	            return true; 
	        } 
	        return false; 
	  }

    /**
     * @desc 根据起止日期获取不同时间段
     * @param startTime 
     * @param endTime
     * @in 为相邻日期长度（以天为单位）
     * ***/
	public static List<Map<String, Object>> getTimeList(String startTime, String endTime,int in,Object obj) {
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		Calendar cal = Calendar.getInstance(Locale.CHINA);
		Calendar cal2 = Calendar.getInstance(Locale.CHINA);
		try {
			Date dt= sdf.parse(startTime);
			 //按周
			if(in==1) {
				for (int i = 0; i < 7; i++) {
					Map<String, Object> map = new HashMap<String, Object>();
					map.put("logUserId",obj);
					if(i==0) {
						map.put("startTime",startTime+" 00:00:00");
						map.put("endTime",startTime+" 23:59:59");
						list.add(map);
					}else if(i==6) {
						map.put("startTime",endTime+" 00:00:00");
						map.put("endTime",endTime+" 23:59:59");
						list.add(map);
					}else {
						cal.setTime(dt);
						cal.add(Calendar.DATE, i);
						String stime = sdf.format(cal.getTime());
						map.put("startTime",stime+" 00:00:00");
						map.put("endTime",stime+" 23:59:59");
						list.add(map);
					}
				}
				
			}else if(in==3){
			    //按月
				long etime = sdf.parse(endTime).getTime();
				//注入开始时间
				cal.setTime(dt);
				long atime = cal.getTime().getTime();
				int ins = 1;
				boolean bool = true;
				while(atime<etime) {
					Map<String, Object> map = new HashMap<String, Object>();
					map.put("logUserId",obj);
					if(ins>1 && !bool){
						cal2.setTime(cal.getTime());
						cal2.add(Calendar.DATE, 1);
						map.put("startTime",sdf.format(cal2.getTime())+" 00:00:00");
						cal.setTime(cal2.getTime());
						bool = true;
					}
					if(ins==1) {
						map.put("startTime",startTime+" 00:00:00");
						ins+=1;
					}
					if(bool) {
						cal.setTime(cal.getTime());
						cal.add(Calendar.DATE, 2);
						bool = false;
						atime = cal.getTime().getTime();
						if(atime>=etime) {
							map.put("endTime",endTime+" 23:59:59");
							list.add(map);
							break;
						}else {
							String stime = sdf.format(cal.getTime());
							map.put("endTime",stime+" 23:59:59");
						}
					}
					list.add(map);
				}
			}
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return list;
	} 
	/**
	 * @Desc 获取三个月每个月范围
	 * @return 
	 * ***/
	public static List<Map<String, Object>> getTimeLists(String startTime, String endTime,int in) {
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		Calendar calendar = new GregorianCalendar();  
		try {
			for (int i = 0; i < 3; i++) {
				  Map<String, Object> map = new HashMap<String, Object>();
				  if(isLastDayOfMonth(sdf.parse(endTime))) {
					  if(i==0){
						  calendar.setTime(sdf.parse(startTime));
						  map.put("startTime",startTime+" 00:00:00");
					  }else {
						  calendar.add(Calendar.DATE, 1);
						  map.put("startTime",sdf.format(calendar.getTime())+" 00:00:00");
					  }
					  calendar.add(Calendar.MONTH, 1);  
					  calendar.set(Calendar.DAY_OF_MONTH, 0); 
					  map.put("endTime",sdf.format(calendar.getTime())+" 23:59:59");
				   }else {
					   if(i==0) {
						      calendar.setTime(sdf.parse(startTime));
							  map.put("startTime",sdf.format(calendar.getTime())+" 00:00:00");
							  calendar.add(Calendar.MONTH, 1);
							  calendar.add(Calendar.DATE, -2);
							  map.put("endTime",sdf.format(calendar.getTime())+" 23:59:59");
					   }else if(i==2) {
						      calendar.add(Calendar.DATE, 1);
							  map.put("startTime",sdf.format(calendar.getTime())+" 00:00:00");
							  map.put("endTime",endTime+" 23:59:59");
					   }else {
						   calendar.add(Calendar.DATE, 1);
						   map.put("startTime",sdf.format(calendar.getTime())+" 00:00:00");
						   calendar.add(Calendar.MONTH, 1);
						   calendar.add(Calendar.DATE, -1);
						   map.put("endTime",sdf.format(calendar.getTime())+" 23:59:59"); 
					   }
				   }
				   list.add(map);
	               
			}
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return  list;
	}
	public static String dayForWeek(Date dt){
		 String [] strs = {"星期日","星期一","星期二","星期三","星期四","星期五","星期六"};
		 Calendar cal = Calendar.getInstance();
		 cal.setTime(dt);
		 int in = cal.get(Calendar.DAY_OF_WEEK);
		 return strs[in-1];
	}
	
	public static String strDayForWeek(String dt){
		 String [] strs = {"周日","周一","周二","周三","周四","周五","周六"};
		 int in = 0;
		 Date date;
		try {
			date = sdf.parse(dt);
			Calendar cal = Calendar.getInstance();
			cal.setTime(date);
		  in = cal.get(Calendar.DAY_OF_WEEK);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		 return strs[in-1];
	}
	
	public static String yearStr(String timestr) {
		String sr = null;
		try {
			Date dt = sdf.parse(timestr);
			sr = sdf6.format(dt);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return sr;
	}
	
	public static String yearStr2(String timestr) {
		String sr = null;
		try {
			Date dt = sdf.parse(timestr);
			sr = sdf.format(dt);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return sr;
	}
	
	public static String timeStr(String timestr) {
		String sr = null;
		try {
			Date dt = sdf.parse(timestr);
			sr = sdf3.format(dt);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return sr;
	}
	public static String timeStr2(String timestr) {
		String sr = null;
		try {
			Date dt = sdf5.parse(timestr);
			sr = sdf4.format(dt);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return sr;
	}
	
	public static Map<String,Object> CustimeDateTime(Map<String, Object> map,String startTime,String endTime){
		try {
			if(StringUtils.isBlank(startTime) || StringUtils.isBlank(endTime)) {
				//Assert.isNull("startTime或endTime is null");
			}
			map.put("startTime", startTime);
			map.put("endTime", endTime);
			long beginDate = sdf.parse(startTime).getTime();
			long endDate   = sdf.parse(endTime).getTime();
			//判断时间执行什么操作
			if(endDate==beginDate) {
				map.put("range", "customTime");
				getDayTimeStr(map,startTime,endTime);
				return map;
			}
			if(map.get("range")!=null && "thisYear".endsWith((String)map.get("range"))) {
				getYearTimeStr(map,startTime,endTime);
			    return map; 
			}
			if(map.get("range")!=null && "thisMonth".endsWith((String)map.get("range"))) {
				getDateList(map,startTime, endTime);
				return map;
			}
			if(map.get("range")!=null && "thisThreeMonth".endsWith((String)map.get("range"))) {
				getMoreMonthTimeStr(map,startTime,endTime);
				return map;
			}
			map.put("range", "thisWeek");
			List<Map<String, Object>> list = getTimeList(startTime, endTime, 1,map.get("logUserId"));
			map.put("enoughData", list);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return map;
	}
	
	private static void getDayTimeStr(Map<String, Object> map, String startTime, String endTime) {
		List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();
		for (int i = 0; i < 25; i+=3) {
	    	  Map<String,Object>  map1 = new HashMap<String,Object>();
	    	  if(i==0) {
	    		  continue;
	    	  }
			  if(i<10) {
				  map1.put("startTime",startTime+" 0"+(i-3)+":00:00");
	    		  map1.put("endTime",endTime+" 0"+i+":00:00");
	    		  list.add(map1);
			  }else {
				  if(i-3<10) {
					  map1.put("startTime",startTime+" 0"+(i-3)+":00:00");
				  }else {
					  map1.put("startTime",startTime+" "+(i-3)+":00:00");
				  }
				  if(i==24) {
					  map1.put("endTime",endTime+" 23:59:59");
				  }else {
					  map1.put("endTime",endTime+" "+i+":00:00");
				  }
	    		  list.add(map1);
			  }
			
		}
		map.put("enoughData", list);
		
	}


	/**
	 * 获取多个月时间段
	 * **/
	private static void getMoreMonthTimeStr(Map<String, Object> map, String startTime, String endTime) {
		List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();
		 Calendar cal = Calendar.getInstance(Locale.CHINA); 
		 try {
			Date beginTime2 = sdf.parse(startTime);
			Date endTime2   = sdf.parse(endTime);
			cal.setTime(beginTime2);
			boolean bool = true;
			int in = 1;
			while(bool) {
				 Map<String,Object>  map1 = new HashMap<String,Object>();
				 if(in==1){
					 map1.put("startTime",startTime+" 00:00:00");
				 }else{
					 cal.add(Calendar.DATE, 1);
					 map1.put("startTime",sdf.format(cal.getTime())+" 00:00:00");
				 }
	             cal.add(Calendar.DATE, 6);
				 if(cal.getTime().getTime()<endTime2.getTime()){
					 map1.put("endTime",sdf.format(cal.getTime())+" 23:59:59");
				 }else{
					 bool = false;
					 map1.put("endTime",endTime+" 23:59:59");
				 }
				 map1.put("logUserId",map.get("logUserId"));
				 list.add(map1);
			     in++;
			}
			map.put("enoughData", list);
		 } catch (ParseException e) {
				e.printStackTrace();
			}
			
		
	}
	/**
	 * 获取三天时间段
	 * **/
	private static void getDateList(Map<String, Object> map, String startTime, String endTime) {
		List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();
		 Calendar cal = Calendar.getInstance(Locale.CHINA); 
		 try {
			Date beginTime2 = sdf.parse(startTime);
			Date endTime2   = sdf.parse(endTime);
			cal.setTime(beginTime2);
			boolean bool = true;
			int in = 1;
			while(bool) {
				 Map<String,Object>  map1 = new HashMap<String,Object>();
				 if(in==1){
					 map1.put("startTime",startTime+" 00:00:00");
				 }else{
					 cal.add(Calendar.DATE, 1);
					 map1.put("startTime",sdf.format(cal.getTime())+" 00:00:00");
				 }
	             cal.add(Calendar.DATE, 2);
				 if(cal.getTime().getTime()<endTime2.getTime()){
					 map1.put("endTime",sdf.format(cal.getTime())+" 23:59:59");
				 }else{
					 bool = false;
					 map1.put("endTime",endTime+" 23:59:59");
				 }
				 map1.put("logUserId",map.get("logUserId"));
				 list.add(map1);
			     in++;
			}
			map.put("enoughData", list);
		 } catch (ParseException e) {
				e.printStackTrace();
			}
			
		
	}
	
	/***
	 * 获取月份时间变化
	 * */
	private static void getMonthTimeStr(Map<String, Object> map, String startTime, String endTime) {
		List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();
		 Calendar cal = Calendar.getInstance(Locale.CHINA); 
		 String etime = null;
		 String lasttime = null; //上一次加的层数
		 try {
			Date beginTime2 = sdf.parse(startTime);
			Date endTime2   = sdf.parse(endTime);
			cal.setTime(beginTime2);
			long btime = cal.getTime().getTime();
			int ins = 1;
			while(btime<endTime2.getTime()) {
				cal.add(Calendar.MONTH,1);
				btime = cal.getTimeInMillis();
				etime = new SimpleDateFormat("yyyy-MM-dd").format(cal.getTime());
			    if(ins==1) {
			    	Map<String,Object>  map1 = new HashMap<String,Object>();
			    	 map1.put("startTime",startTime+" 00:00:00");
					 map1.put("endTime",etime+" 00:00:00");
					 map1.put("logUserId",map.get("logUserId"));
					 list.add(map1);
			    }else {
			    	 if(btime>endTime2.getTime()) {
			    		 if(ins>1) {
			    			 Map<String,Object>  map2 = new HashMap<String,Object>();
					    	 map2.put("startTime",lasttime+" 00:00:00");
							 map2.put("endTime",endTime+" 23:59:59");
							 map2.put("logUserId",map.get("logUserId"));
							 list.add(map2);
			 			}
			    	 }else {
			    		 Map<String,Object>  map3 = new HashMap<String,Object>();
				    	 map3.put("startTime",lasttime+" 00:00:00");
						 map3.put("endTime",etime+" 00:00:00");
						 map3.put("logUserId",map.get("logUserId"));
						 list.add(map3);
			    	 }
			    }
			    lasttime = etime;
			    ins++;
			}
			map.put("enoughData", list);
		 } catch (ParseException e) {
				e.printStackTrace();
			}
			
	}

    /**
     * @desc 获取一年的各月份
     * */
	@SuppressWarnings("deprecation")
	private static void getYearTimeStr(Map<String,Object> map,String startTime, String endTime) {
		List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();
		 Calendar cal = Calendar.getInstance(Locale.CHINA); 
	try {
		 cal.setTime(sdf.parse(startTime));
		 Date dt = new Date();
		 int ins = 1;
		 while(ins<13) {
			 Map<String,Object>  map1 = new HashMap<String,Object>();
			 map1.put("logUserId",map.get("logUserId"));
			  if(isfirstDayOfMonth(sdf.parse(startTime))){
				  if(ins<2){
					  map1.put("startTime",getFisrtDayOfMonth(cal.getTime().getYear(),cal.getTime().getMonth())+" 00:00:00");
					  map1.put("endTime",getLastDayOfMonth(cal.getTime().getYear(),cal.getTime().getMonth())+" 23:59:59");
				  }else{
					  cal.add(Calendar.MONTH,1);
					  map1.put("startTime",getFisrtDayOfMonth(cal.getTime().getYear(),cal.getTime().getMonth())+" 00:00:00");
					  map1.put("endTime",getLastDayOfMonth(cal.getTime().getYear(),cal.getTime().getMonth())+" 23:59:59");
				  }
			  }else{
				  if(ins<2){
					  map1.put("startTime",startTime+" 00:00:00");
				  }else{
					  map1.put("startTime",sdf.format(cal.getTime())+" 00:00:00");
				  }
				  cal.add(Calendar.MONTH,1);
				  if(ins<12){
					  map1.put("endTime",sdf.format(cal.getTime())+" 00:00:00");
				  }else{
					  map1.put("endTime",sdf.format(cal.getTime())+" 23:59:59");
				  }
			  } 
			  list.add(map1);
			  ins++;
		 }
			
			map.put("enoughData", list);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		
	}
	 //判断是否为闰年
	 public boolean leapYear(int year) {
	        boolean leap;
	        if (year % 4 == 0) {
	            if (year % 100 == 0) {
	                if (year % 400 == 0) leap = true;
	                else leap = false;
	            }
	            else leap = true;
	        }
	        else leap = false;
	        return leap;
   }

	 
  public static String isMoreDay(String sr,Map<String,Object> map) {
	  try {
		  	  String startTime = (String)map.get("startTime");
			  String endTime  = (String)map.get("endTime");
			  long beginDate = sdf.parse(startTime).getTime();
			  long endDate   = sdf.parse(endTime).getTime();
			  System.out.println(startTime+endTime);
			  if(((endDate-beginDate)/(24*3600*1000))<=1) {
				  sr = DateTool.timeStr2((String)map.get("startTime"))+"-"+DateTool.timeStr2((String)map.get("endTime"));
			  }else if(((endDate-beginDate)/(24*3600*1000))>366) {
				  sr = DateTool.yearStr2((String)map.get("startTime"))+"/"+DateTool.yearStr2((String)map.get("endTime"));
			  }else {
				  sr = DateTool.yearStr((String)map.get("startTime"));
			  }
			  
	  } catch (ParseException e) {
			e.printStackTrace();
	  }
	  return sr;
  }	 
	 
	 
	public static void main(String[] args) throws ParseException {
		Map<String, Object> map = new HashMap<String,Object>();
		map.put("range", "thisMonth");
		//map.put("range", "thisThreeMonth");
		//map.put("range", "thisWeek");
		//map.put("range", "thisYear");
		//List<Map<String, Object>> list = getTimeLists("2018-02-03","2018-5-25",3);
//		 map.put("startTime", "2017-01-21");
//	     map.put("endTime", "2017-01-23");
		//getDayTimeStr(map,"2017-01-23","2017-01-23");
		//String sr = timeStr2("2018-02-12 23:12:20");
		getcurrlastweek(map);
		System.out.println(map.toString());
		CustimeDateTime(map,(String)map.get("startTime"),(String)map.get("endTime"));
		System.out.println(map);
	}

	public static String strForWeeks(int i) {
		char[] chs = {'一','二','三','四','五','六','七','八','九','十'};
		i= i+1;
		char [] chars = String.valueOf(i).toCharArray();
		if(chars.length<2){
			return chs[i-1]+"周";
		}else{
			int val = Character.getNumericValue(chars[1]);
            if(val==0){
            	return "十周";
            }			
			String st = String.valueOf(chs[chs.length-1])+String.valueOf(chs[val-1]);
			return st+"周";
		}
	}




}
